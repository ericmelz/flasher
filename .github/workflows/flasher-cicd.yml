name: Flasher App CI/CD

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
    paths:
      - 'src/**'
      - 'data/**'
      - 'Dockerfile'
      - '.github/workflows/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'data/**'
      - 'Dockerfile'
      - '.github/workflows/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/flasher

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest
          
      - name: Run tests
        run: |
          pytest

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha,format=short
            latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }} 

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo -e "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H emelz.com >> ~/.ssh/known_hosts

      - name: Prepare K8s manifests for deployment
        run: |
          # Create a temp directory for the manifests
          mkdir -p ./k8s-deploy
          
          # Copy the K8s manifests to the temp directory (unmodified originals)
          cp ./k8s/* ./k8s-deploy/
          
          # Get the Git SHA for the image tag
          GIT_SHA=$(git rev-parse --short HEAD)
          
          # Update the deployment.yaml with the specific image tag (modify the copy)
          sed -i "s|flasher:latest|ghcr.io/${{ github.repository_owner }}/flasher:sha-${GIT_SHA}|g" ./k8s-deploy/deployment.yaml
          
          # Update imagePullPolicy since we're now using a registry
          sed -i "s|imagePullPolicy: Never|imagePullPolicy: Always|g" ./k8s-deploy/deployment.yaml
          
          # Print the changes for verification (optional)
          echo "Updated deployment to use image tag: sha-${GIT_SHA}"
          grep -n "image:" ./k8s-deploy/deployment.yaml

      - name: Copy K8s manifests to server
        run: |
          # Create a directory on the server
          ssh -i ~/.ssh/id_ed25519 deployer@emelz.com "mkdir -p ~/k8s-manifests/flasher"
          
          # Copy the manifests to the server
          scp -i ~/.ssh/id_ed25519 -r ./k8s-deploy/* deployer@emelz.com:~/k8s-manifests/flasher/

      - name: Deploy to Kubernetes
        run: |
          ssh -i ~/.ssh/id_ed25519 deployer@emelz.com '
            export KUBECONFIG=/home/deployer/.kube/config &&
            kubectl apply -f ~/k8s-manifests/flasher/ &&
            kubectl rollout status deployment/flasher --timeout=180s &&
            if [ $? -eq 0 ]; then
              echo "Deployment successful!"
            else
              echo "Deployment failed!"
              exit 1
            fi
          '            

      - name: Verify Deployment
        run: |
          ssh -i ~/.ssh/id_ed25519 deployer@emelz.com '
            export KUBECONFIG=/home/deployer/.kube/config &&
            kubectl get pods -l app=flasher &&
            kubectl get svc flasher &&
            kubectl get ingress flasher
          ' 